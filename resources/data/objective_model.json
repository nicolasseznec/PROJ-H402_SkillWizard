{
  "types": [
    {
      "name": "Real",
      "code": "Real"
    },
    {
      "name": "Pos",
      "code": "CVector2"
    },
    {
      "name": "List[Real]",
      "code": "std::vector<Real>"
    },
    {
      "name": "List[Pos]",
      "code": "std::vector<CVector2>"
    }
  ],
  "variables": [
    {
      "name": "robotsPos",
      "type": "List[Pos]",
      "code": "  std::vector<CVector2> robotsPos;\n  CSpace::TMapPerType& tEpuckMap = GetSpace().GetEntitiesByType(\"epuck\");\n  for (CSpace::TMapPerType::iterator it = tEpuckMap.begin(); it != tEpuckMap.end(); ++it) {\n    CEPuckEntity* pcEpuck = any_cast<CEPuckEntity*>(it->second);\n    robotsPos.push_back(CVector2(pcEpuck->GetEmbodiedEntity().GetOriginAnchor().Position.GetX(), pcEpuck->GetEmbodiedEntity().GetOriginAnchor().Position.GetY()));\n  }\n"
    },
    {
      "name": "objective",
      "type": "Real",
      "code": "  Real objective = m_ObjectiveFunction;\n"
    }
  ],
  "functions": [
    {
      "name": "sum",
      "call": "Sum",
      "arguments": ["List[Real]"],
      "return": "Real",
      "declaration": "Real Sum(std::vector<Real>&);\n",
      "definition": "Real ${objective_name}LoopFunction::Sum(std::vector<Real>& elements) {\n    Real temp = 0;\n    for (Real value: elements)\n        temp += value;\n    return temp;\n}\n",
      "description": ""
    },
    {
      "name": "dist 1-1",
      "call": "Dist",
      "arguments": ["Pos", "Pos"],
      "return": "Real",
      "declaration": "Real Dist(CVector2&, CVector2&);\n",
      "definition": "Real ${objective_name}LoopFunction::Dist(CVector2& pos1, CVector2& pos2) {\n    return (pos1 - pos2).Length();\n}\n",
      "description": ""
    },
    {
      "name": "dist N-1",
      "call": "Dist",
      "arguments": ["List[Pos]", "Pos"],
      "return": "List[Real]",
      "declaration": "std::vector<Real> Dist(std::vector<CVector2>&, CVector2&);\n",
      "definition": "std::vector<Real> ${objective_name}LoopFunction::Dist(std::vector<CVector2>& positions, CVector2& pos1) {\n    std::vector<CVector2> temp;\n    for (CVector2 pos: positions)\n        temp.push_back(Dist(pos, pos1));\n    return temp;\n}\n",
      "description": ""
    },
    {
      "name": "dist 1-N",
      "call": "Dist",
      "arguments": ["Pos", "List[Pos]"],
      "return": "List[Real]",
      "declaration": "std::vector<Real> Dist(CVector2&, std::vector<CVector2>&);\n",
      "definition": "std::vector<Real> ${objective_name}LoopFunction::Dist(CVector2& pos1, std::vector<CVector2> positions) {\n    return Dist(positions, pos1);\n}\n",
      "description": ""
    },
    {
      "name": "dist N-N",
      "call": "Dist",
      "arguments": ["List[Pos]", "List[Pos]"],
      "return": "List[Real]",
      "declaration": "std::vector<Real> Dist(std::vector<CVector2>&, std::vector<CVector2>&);\n",
      "definition": "std::vector<Real> ${objective_name}LoopFunction::Dist(std::vector<CVector2> positions1, std::vector<CVector2> positions2) {\n    std::vector<CVector2> temp;\n    for (int i = 0; i < std::min(positions1.size(), positions2.size()); i++)\n        temp.push_back(Dist(positions1[i], positions2[i]));\n\n    return temp;\n}",
      "description": ""
    },
    {
      "name": "dist NxN",
      "call": "DistX",
      "requires": ["dist"],
      "arguments": ["List[Pos]", "List[Pos]"],
      "return": "List[Real]",
      "declaration": "std::vector<Real> DistX(std::vector<CVector2>&, std::vector<CVector2>&);\n",
      "definition": "std::vector<Real> ${objective_name}LoopFunction::DistX(std::vector<CVector2> positions1, std::vector<CVector2> positions2) {\n    std::vector<CVector2> temp;\n    for (int i = 0; i < positions1.size(); i++) {\n        for (int j = 0; j < positions2.size(); j++) {\n            temp.push_back(Dist(positions1[i], positions2[j]));\n    }\n    return temp;\n}\n",
      "description": ""
    },
    {
      "name": "count pos",
      "call": "Count",
      "arguments": ["List[Pos]"],
      "return": "Real",
      "declaration": "template <typename T> Real Count(const std::vector<T>& vec);\n",
      "definition": "template <typename T>\nReal ${objective_name}LoopFunction::Count(const std::vector<T>& vec) {\n    return vec.size();\n}\ntemplate Real ${objective_name}LoopFunction::Count(const std::vector<Real>& vec);\ntemplate Real ${objective_name}LoopFunction::Count(const std::vector<CVector2>& vec);\n",
      "description": ""
    },
    {
      "name": "count Real",
      "call": "Count",
      "arguments": ["List[Real]"],
      "return": "Real",
      "declaration": "",
      "definition": "",
      "description": ""
    },
    {
      "name": "closest",
      "call": "ClosestNeighbors",
      "arguments": ["List[Pos]"],
      "return": "List[Pos]",
      "declaration": "std::vector<CVector2> ClosestNeighbors(std::vector<CVector2>&);\n",
      "definition": "std::vector<CVector2> ${objective_name}LoopFunction::ClosestNeighbors(std::vector<CVector2>& positions) {\n    std::vector<CVector2> temp;\n    for (const CVector2& currentPos : positions) {\n        Real minDistance = -1;\n        CVector2 closestNeighbor;\n        for (const CVector2& otherPos : positions) {\n            if (&currentPos == &otherPos) continue;\n            Real distance = (currentPos - otherPos).Length();\n            if (distance < minDistance || minDistance < 0) {\n                minDistance = distance;\n                closestNeighbor = otherPos;\n            }\n        }\n        temp.push_back(closestNeighbor);\n    }\n    return temp;\n}\n",
      "description": ""
    },
    {
      "name": "update 1-1 pos",
      "call": "Update",
      "arguments": ["Pos", "Pos"],
      "return": "Real",
      "declaration": "template <typename T> Real Update(T&, T&);\n",
      "definition": "template <typename T>\nvoid ${objective_name}LoopFunction::Update(T& subject, T& target) {\n    subject = target;\n    return 0;\n}\ntemplate Real ${objective_name}LoopFunction::Update(Real&, Real&);\ntemplate Real ${objective_name}LoopFunction::Update(CVector2&, CVector2&);\n",
      "description": ""
    },
    {
      "name": "update 1-1 real",
      "call": "Update",
      "arguments": ["Real", "Real"],
      "return": "Real",
      "declaration": "",
      "definition": "",
      "description": ""
    },
    {
      "name": "update N-N pos",
      "call": "Update",
      "arguments": ["List[Pos]", "List[Pos]"],
      "return": "Real",
      "declaration": "template <typename T> Real Update(std::vector<T>&, std::vector<T>&);\n",
      "definition": "template <typename T>\nReal ${objective_name}LoopFunction::Update(std::vector<T>& subject, std::vector<T>& target) {\n    for (int i = 0; i < subject.size(); i++) {\n        if (i >= target.size()) break;\n        subject[i] = target[i];\n    }\n    return 0;\n}\ntemplate Real ${objective_name}LoopFunction::Update(std::vector<Real>&, std::vector<Real>&);\ntemplate Real ${objective_name}LoopFunction::Update(std::vector<CVector2>&, std::vector<CVector2>&);\n",
      "description": ""
    },
    {
      "name": "update N-N real",
      "call": "Update",
      "arguments": ["List[Real]", "List[Real]"],
      "return": "Real",
      "declaration": "",
      "definition": "",
      "description": ""
    }
  ]
}